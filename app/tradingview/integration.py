import urllib.parse
import json
import streamlit as st

def generate_tradingview_chart_url(symbol, exchange="NASDAQ", timeframe="D", indicators=None):
    """
    Generate a TradingView chart URL with specified symbol and indicators
    
    Args:
        symbol (str): Trading symbol (e.g., 'AAPL', 'BTC')
        exchange (str): Exchange code (e.g., 'NASDAQ', 'BINANCE')
        timeframe (str): Chart timeframe ('1', '5', '15', '60', 'D', 'W')
        indicators (list, optional): List of indicator names to add to chart
        
    Returns:
        str: TradingView chart URL
    """
    base_url = "https://www.tradingview.com/chart"
    
    # Create query parameters
    params = {
        "symbol": f"{exchange}:{symbol}",
        "interval": timeframe
    }
    
    # Add indicators to URL if specified
    if indicators is not None and isinstance(indicators, list) and len(indicators) > 0:
        # Map indicator names to TradingView study codes
        indicator_map = {
            "ema": "MAExp",
            "macd": "MACD",
            "vwap": "VWAP",
            "rsi": "RSI",
            "bbands": "BB",
            "volume": "Volume"
        }
        
        studies = []
        for indicator in indicators:
            indicator = indicator.lower()
            if indicator in indicator_map:
                studies.append(indicator_map[indicator])
        
        if len(studies) > 0:
            params["studies"] = ",".join(studies)
    
    # Construct the URL
    query_string = urllib.parse.urlencode(params)
    full_url = f"{base_url}?{query_string}"
    
    return full_url

def generate_indicator_script(indicators, signals=True):
    """
    Generate Pine Script code for custom indicators and signals
    
    Args:
        indicators (list): List of indicator names to include in the script
        signals (bool): Whether to include buy/sell signals in the script
        
    Returns:
        str: Pine Script code that can be pasted into TradingView Pine Editor
    """
    script = """// Day Trading Helper Indicators
// Generated by Day Trading Helper Tool
//@version=4
study("Day Trading Helper", overlay=true)

"""
    
    # Add indicator calculations
    if indicators is not None and isinstance(indicators, list) and "ema" in indicators or "ema_cloud" in indicators:
        script += """
// EMA calculations
fast_length = input(20, title="Fast EMA Length")
slow_length = input(50, title="Slow EMA Length")
long_length = input(200, title="Long EMA Length")

fast_ema = ema(close, fast_length)
slow_ema = ema(close, slow_length)
long_ema = ema(close, long_length)

plot(fast_ema, title="Fast EMA", color=color.blue, linewidth=1)
plot(slow_ema, title="Slow EMA", color=color.red, linewidth=1)
plot(long_ema, title="Long EMA", color=color.purple, linewidth=1)

// EMA Cloud
ema_cloud_bullish = fast_ema > slow_ema
ema_cloud_bearish = fast_ema < slow_ema
fill(fast_ema, slow_ema, color=ema_cloud_bullish ? color.new(color.green, 90) : color.new(color.red, 90))

"""
    
    if indicators is not None and isinstance(indicators, list) and "macd" in indicators:
        script += """
// MACD calculation
fast_ma = input(12, title="MACD Fast Length")
slow_ma = input(26, title="MACD Slow Length")
signal_length = input(9, title="MACD Signal Length")

[macd_line, signal_line, hist] = macd(close, fast_ma, slow_ma, signal_length)

// MACD is plotted on a separate pane by default in TradingView

"""
    
    if indicators is not None and isinstance(indicators, list) and "vwap" in indicators:
        script += """
// VWAP calculation
show_vwap = input(true, title="Show VWAP")
vwap_value = vwap(close)
plot(show_vwap ? vwap_value : na, title="VWAP", color=color.blue, linewidth=2)

"""
    
    # Add signal generation if requested
    if signals is True:
        script += """
// Signal generation
price_above_fast_ema = close > fast_ema
price_above_slow_ema = close > slow_ema
price_above_long_ema = close > long_ema

// EMA crossings
price_cross_above_fast_ema = crossover(close, fast_ema)
price_cross_below_fast_ema = crossunder(close, fast_ema)
ema_cloud_cross_bullish = crossover(fast_ema, slow_ema)
ema_cloud_cross_bearish = crossunder(fast_ema, slow_ema)

// MACD signals
macd_cross_above_signal = crossover(macd_line, signal_line)
macd_cross_below_signal = crossunder(macd_line, signal_line)
macd_above_zero = macd_line > 0
macd_below_zero = macd_line < 0

// VWAP signals
price_above_vwap = close > vwap_value
price_cross_above_vwap = crossover(close, vwap_value)
price_cross_below_vwap = crossunder(close, vwap_value)

// Buy signal conditions
buy_signal = (
    (price_cross_above_fast_ema and price_above_slow_ema) or
    (macd_cross_above_signal and price_above_fast_ema) or
    ema_cloud_cross_bullish or
    (price_cross_above_vwap and price_above_fast_ema)
)

// Sell signal conditions
sell_signal = (
    (price_cross_below_fast_ema and not price_above_slow_ema) or
    (macd_cross_below_signal and not price_above_fast_ema) or
    ema_cloud_cross_bearish or
    (price_cross_below_vwap and not price_above_fast_ema)
)

// Plot buy and sell signals
plotshape(buy_signal, title="Buy Signal", location=location.belowbar, color=color.green, style=shape.triangleup, size=size.small)
plotshape(sell_signal, title="Sell Signal", location=location.abovebar, color=color.red, style=shape.triangledown, size=size.small)

"""
    
    return script

def render_tradingview_widget(symbol, exchange, timeframe, indicators=None):
    """
    Render a TradingView integration section with options to view chart and indicators
    
    Args:
        symbol (str): Trading symbol
        exchange (str): Exchange code
        timeframe (str): Chart timeframe
        indicators (list, optional): List of indicator names to include
    """
    st.subheader("TradingView Integration")
    
    # Generate TradingView chart URL
    chart_url = generate_tradingview_chart_url(symbol, exchange, timeframe, indicators)
    
    # Display link to TradingView chart
    st.markdown(f"[Open in TradingView]({chart_url})")
    
    # Generate Pine Script
    if indicators is not None and isinstance(indicators, list) and len(indicators) > 0:
        with st.expander("Pine Script for Indicators"):
            pine_script = generate_indicator_script(indicators)
            st.code(pine_script, language="pine")
            st.info("Copy this script and paste it into TradingView Pine Editor to use these indicators.")
    
    # Display TradingView widget (iframe) if available
    try:
        # TradingView widget iframe HTML
        tv_widget_html = f"""
        <div class="tradingview-widget-container">
            <div id="tradingview_chart"></div>
            <script type="text/javascript" src="https://s3.tradingview.com/tv.js"></script>
            <script type="text/javascript">
            new TradingView.widget(
            {{
                "width": "100%",
                "height": 500,
                "symbol": "{exchange}:{symbol}",
                "interval": "{timeframe}",
                "timezone": "exchange",
                "theme": "light",
                "style": "1",
                "locale": "en",
                "toolbar_bg": "#f1f3f6",
                "enable_publishing": false,
                "hide_top_toolbar": false,
                "studies": [
                    "MAExp@tv-basicstudies",
                    "MACD@tv-basicstudies",
                    "VWAP@tv-basicstudies"
                ],
                "container_id": "tradingview_chart"
            }}
            );
            </script>
        </div>
        """
        
        st.components.v1.html(tv_widget_html, height=550)
    except:
        st.warning("TradingView widget not available. Use the link above to open the chart in TradingView.") 